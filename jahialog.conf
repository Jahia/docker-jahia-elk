input {
    beats {
        port => "5044"
    }
}
filter {
	# Depending on the input (filebeat or logstash) we have to test either the [source] or [path] field.
	if "catalina.out" in [source] or "jahia.log" in [source] or "catalina.out" in [path] or "jahia.log" in [path] {
		if "Rendered" in [message] {
			grok {
		       match => [ "message", "%{BASE_LOGFILE} %{JAHIA_PAGE_RENDERED}" ]
		    }
		    mutate {
		      add_field => { "jahialogtype" => "pageRendered" }
		    }		
	    } else if "Error code: 404" in [message] { 
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} \[Error code: 404]: [a-zA-Z ]+: %{URIPATH:pagePath}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "error 404" }
		    }
	    } else if "Error code: 400" in [message] { 
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} \[Error code: 400]: %{GREEDYDATA:error}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "error 400" }
		    }
	    } else if "[GC" in [message] or "[Full GC" in [message] { # should add non-timestamped GC management
	    	grok {
		       match => [ "message", "(?<timestamp_log>[0-9-]+T[0-9:\.]+\+[0-9]+): \[(?<gc_type>[a-zA-Z]+).*, %{NUMBER:gcDuration:float} secs" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "GC" }
		    }
	    } else if "evictExpiredCacheKeyJob" in [message] and "HTMLCache" in [message]  {
	    	grok {
		       match => [ "message", "(?<timestamp_log>[0-9-]+ [0-9:]+,[0-9]+): (?<loglevel>[A-Za-z$_]+)%{SPACE}\[(?<javaClass>[a-zA-Z\-0-9]+)\] - - %{INT:evictedHTMLCache:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "evictHTMLCacheKeys" }
		    }
	    } else if "evictExpiredCacheKeyJob" in [message] and "from cache" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} - %{INT:evictedHTMLCache:int} from cache %{WORD:cacheName:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "evictCacheKeys" }
		    }
	    }
	     else if "evictExpiredCacheKeyJob" in [message] and "from the caches" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Cleaned %{INT:evictedCaches:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "evictCacheKeys" }
		    }
	    } else if "DocNumberCache" in [message] and "cacheRatio" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} %{NOTSPACE}, #accesses=%{INT:accesses:int}, %{NOTSPACE}, %{NOTSPACE}, cacheRatio=%{INT:docNumberCacheRatio:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "docNumberCache" }
		    }
	    } else if "JahiaDatabaseJournal" in [message] and "Creating revision" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Creating revision: %{INT:revisionNumber:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "revisionCreation" }
		    }
	    } else if "SchedulerService" in [message] and "Background job" in [message]  {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Background job %{WORD:jobName}.* finished with status '%{WORD:jobStatus}' in %{INT:jobDuration:int}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "jobExecuted" }
		    }
	    } else if "RulesListener" in [message] and "Rules executed for" in [message] {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Rules executed for %{WORD:workspace} \[.*].*in %{INT:ruleExecDuration:int}ms" ]
		    }

			mutate {
		      add_field => { "jahialogtype" => "ruleExecuted" }

		    }
	    } else  if "AbstractBundlePersistenceManager" in [message] and "cachename" in [message] {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} cachename=%{WORD:cacheName}.*, elements=%{NUMBER:elements:int}, usedmemorykb=%{NUMBER:usedmemorykb:int}, maxmemorykb=%{NUMBER:maxmemorykb:int}, access=%{NUMBER:hit:int}, miss=%{NUMBER:miss:int}" ]
		    }

			mutate {
		      add_field => { "jahialogtype" => "bundleCacheStat" }
		    }
		    mutate {
		      add_field => { "bundleCacheStatRatio" => 0 }
		    }
		    mutate {
		      convert => { "bundleCacheStatRatio" => "float" }
		    }
		    ruby { 
		        code => "event.set('bundleCacheStatRatio', event.get('hit').to_f / (event.get('hit').to_f + event.get('miss').to_f+1))"
		    }
	    } else if "IndexMerger" in [message] and "merged" in [message] {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} merged %{INT:mergedDocs:int} documents in %{INT:mergedDocDuration:int}" ]
		    }

			mutate {
		      add_field => { "jahialogtype" => "indexMerger" }

		    }
		    mutate {
		      add_field => { "mergeDurationPerDoc" => 0 }

		    }
		    mutate {
		      convert => { "mergeDurationPerDoc" => "float" }
		    }

		    ruby { 
		        code => "event.set('mergeDurationPerDoc', event.get('mergedDocDuration').to_f / (event.get('mergedDocs').to_f))"
		    }
	    } else if "Unknown parent node" in [message] and "DocId" in [message] {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} Unknown parent node with id %{NOTSPACE:uuid}" ]
		    }

			mutate {
		      add_field => { "jahialogtype" => "UnknownParent" }

		    }
	    } else {
	    	grok {
		       match => [ "message", "%{BASE_LOGFILE} %{GREEDYDATA:message}" ]
		    }
			mutate {
		      add_field => { "jahialogtype" => "unknown" }
		    }
	    }
	    date {
			match => [ "timestamp_log", "YYYY-MM-dd HH:mm:ss,SSS" ]
			target => "@timestamp"
		} 
	}
}
### TODO
		# 2018-03-25 20:02:46,213: INFO [DocNumberCache] - size=131/1024, #accesses=4158, #hits=3458, #misses=700, cacheRatio=84%, size=131/1024, #accesses=4158, #hits=3458, #misses=700, cacheRatio=84% 
		# 2018-03-25 18:15:00,009: INFO [evictExpiredCacheKeyJob] - - 1 from cache HTMLDependenciesCache, - 1 from cache HTMLDependenciesCache
		# 2018-03-25 18:00:00,094: INFO [SchedulerService] - Background job JobHistoryPurgeJob (of type Maintenance) finished with status 'successful' in 27 ms, Background job JobHistoryPurgeJob (of type Maintenance) finished with status 'successful' in 27 ms
		# 2018-03-25 22:24:46,441: INFO  [ModuleFileInstallHandler] - Done processing FileInstall artifacts
		# 2018-03-25 22:26:46,664: INFO  [ModuleFileInstallHandler] - Processing FileInstall artifacts: 0 created, 1 modified, 0 deleted


output {
  elasticsearch {
    hosts => ["localhost"]
    manage_template => false
    index => "filebeat-%{+YYYY.MM.dd}"
  }
}